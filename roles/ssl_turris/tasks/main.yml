---
# files to copy:
- name: Load privkey contents
  ansible.builtin.slurp:
    src: "{{ __ssl_domain_path }}/privkey.pem"
  register: __ssl_privkey
  delegate_to: "{{ ssl_letsencrypt_host }}"

- name: Load cert contents
  ansible.builtin.slurp:
    src: "{{ __ssl_domain_path }}/cert.pem"
  register: __ssl_cert
  delegate_to: "{{ ssl_letsencrypt_host }}"

- name: Load chain contents
  ansible.builtin.slurp:
    src: "{{ __ssl_domain_path }}/chain.pem"
  register: __ssl_chain
  delegate_to: "{{ ssl_letsencrypt_host }}"

- name: Create lighttpd pemfile
  ansible.builtin.copy:
    dest: "{{ __ssl_lighthttpd_conf_dir_path }}/{{ __ssl_lighthttpd_cert_pemfile_filename }}"
    content: |-
      {{ __ssl_privkey.content | b64decode }}
      {{ __ssl_cert.content | b64decode }}
    mode: 0400
  notify: Restart lighttpd service

- name: Create lighttpd ca-file
  ansible.builtin.copy:
    dest: "{{ __ssl_lighthttpd_conf_dir_path }}/{{ __ssl_lighthttpd_cert_ca_file_filename }}"
    content: "{{ __ssl_chain.content | b64decode }}"
    mode: 0400
  notify: Restart lighttpd service

- name: Cleanup variables with ssl certs
  ansible.builtin.set_fact:
    __ssl_privkey: ""
    __ssl_cert: ""
    __ssl_chain: ""

- name: Set path to pemfile in lighttpd ssl config
  ansible.builtin.lineinfile:
    path: "{{ __ssl_lighthttpd_ssl_conf_file_path }}"
    regexp: "^ssl.pemfile ="
    line: 'ssl.pemfile = "{{ __ssl_lighthttpd_conf_dir_path }}/{{ __ssl_lighthttpd_cert_pemfile_filename }}"'
  notify: Restart lighttpd service

- name: Set path to chain in lighttpd ssl config
  ansible.builtin.lineinfile:
    path: "{{ __ssl_lighthttpd_ssl_conf_file_path }}"
    regexp: "^ssl.ca-file ="
    line: 'ssl.ca-file = "{{ __ssl_lighthttpd_conf_dir_path }}/{{ __ssl_lighthttpd_cert_ca_file_filename }}"'
  notify: Restart lighttpd service

# TODO: Check service is running and certificate is valid

# Configure service to automatic cert re-deploy
- name: Load info about certbot user
  ansible.builtin.user:
    name: "{{ __ssl_certbot_username }}"
    generate_ssh_key: true
  register: __ssl_certbot_user
  delegate_to: "{{ ssl_letsencrypt_host }}"

# certbot user can ssh to turris
- name: Enable certbot user to ssh to turris host
  ansible.posix.authorized_key:
    user: "{{ __ssl_turris_user }}"
    state: present
    key: "{{ __ssl_certbot_user.ssh_public_key }}"

# Create deploy systemd service
- name: Create deploy script
  ansible.builtin.file:
    path: "{{ __ssl_certbot_user.home }}/bin/"
    state: directory
    mode: 0755
  delegate_to: "{{ ssl_letsencrypt_host }}"

- name: Create deploy script
  ansible.builtin.template:
    src: deploy-script.sh.j2
    dest: "{{ __ssl_certbot_user.home }}/bin/{{ __ssl_turris_deploy_script_name }}"
    mode: 0700
    owner: "{{ __ssl_certbot_username }}"
  delegate_to: "{{ ssl_letsencrypt_host }}"

- name: Create Deploy systemd unit
  ansible.builtin.template:
    src: deploy-cert.service.j2
    dest: "{{ __ssl_certbot_systemd_dir }}/{{ __ssl_systemd_deploy_unit_base_name }}.service"
    mode: 0644
    owner: "{{ __ssl_certbot_username }}"
  become_user: "{{ __ssl_certbot_username }}"
  delegate_to: "{{ ssl_letsencrypt_host }}"
  notify: Reload systemd on letsencrypt host

- name: Create Deploy systemd timer unit
  ansible.builtin.template:
    src: deploy-cert.timer.j2
    dest: "{{ __ssl_certbot_systemd_dir }}/{{ __ssl_systemd_deploy_unit_base_name }}.timer"
    mode: 0644
    owner: "{{ __ssl_certbot_username }}"
  become_user: "{{ __ssl_certbot_username }}"
  delegate_to: "{{ ssl_letsencrypt_host }}"
  notify: Reload systemd on letsencrypt host

- name: Force all notified handlers to run at this point
  ansible.builtin.meta: flush_handlers

- name: Enable timer service {{ __ssl_systemd_deploy_unit_base_name }}
  ansible.builtin.systemd:
    enabled: true
    name: "{{ __ssl_systemd_deploy_unit_base_name }}.timer"
    scope: user
  become_user: "{{ __ssl_certbot_username }}"
  delegate_to: "{{ ssl_letsencrypt_host }}"
